package services;

import java.util.Properties;

import org.apache.kafka.clients.producer.Callback;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;

import com.google.inject.Singleton;

@Singleton
public class KafkaUtil {

	private KafkaProducer<String, String> producer;
	private String topicName = "test";

	public KafkaUtil() {
		//initKafka();
	}

	public void log(String message) {
		Integer partition = 0;
		Long timestamp = System.currentTimeMillis();
		String key = "microservice-name";
		producer.send(new ProducerRecord<String, String>(topicName, partition, timestamp, key, message),
				new Callback() {
					@Override
					public void onCompletion(RecordMetadata arg0, Exception arg1) {

						if(arg0 !=null){
							System.out.println("Result? " + arg0.topic());
						}
						if (arg1 != null) {
							arg1.printStackTrace();
						}

					}
				});
	}

	private void initKafka() {
		// Assign topicName to string variable

		// create instance for properties to access producer configs
		Properties props = new Properties();

		// Assign localhost id
		props.put("bootstrap.servers", "localhost:9092");

		 // Set acknowledgements for producer requests.
		 props.put("acks", "0");

		 // If the request fails, the producer can automatically retry,
		 props.put("retries", 1);

		 // Specify buffer size in config
		 props.put("batch.size", 16384);

		 // Reduce the no of requests less than 0
		 props.put("linger.ms", 1);

		 // The buffer.memory controls the total amount of memory available to
		 // the producer for buffering.
		 props.put("buffer.memory", 33554432);

		props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");

		props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");

		producer = new KafkaProducer<String, String>(props);
	}

}
